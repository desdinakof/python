# -*- coding: utf-8 -*-
"""prachReceiver.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T2kJSb2qYFjs1Gf5nYGLp1RaJEGrx6fJ

from google.colab import drive

drive.mount('/content/drive')

"""
"""**Importing Libraries**"""

import pandas as pd
import numpy as np
#import seaborn as sns
#import statsmodels.formula.api as sm
#import statsmodels.regression.linear_model as sm
#from matplotlib import pyplot as plt
#from sklearn.feature_selection import SelectKBest
#from sklearn.feature_selection import RFE
#from sklearn.feature_selection import chi2
#from sklearn.linear_model import LogisticRegression
#from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
#from numpy import loadtxt
import tensorflow
import tensorflow.keras.metrics as kkme
import tensorflow.keras.models as km
import tensorflow.keras.layers as kla
#import tensorflow.keras.optimizers as ko
import tensorflow.keras.losses as klo
from sklearn.preprocessing import StandardScaler
#from sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, f1_score, precision_score, recall_score,r2_score
import time
#import scipy.io

"""**Downloading Datasets**"""
#df = pd.read_csv("C:/Users/desdina.kof/Desktop/calismalarim/prach/dataset-master/custom_datasets/AwgnTx1Rx2Scs15A1PrIx00Cf01It12_v2.csv")

x = pd.read_csv("D:/preprocessed data/x_highSNRAwgnTx1Rx2Scs15A1PrIx00Cf01It{:02d}_3max_prep.csv".format(1))
y3 = pd.read_csv("D:/preprocessed data/y_highSNRAwgnTx1Rx2Scs15A1PrIx00Cf01It{:02d}_3max_prep.csv".format(1))

print("8")
x_train, x_test, y_train, y_test = train_test_split(x, y3, train_size=0.75, test_size=0.25, shuffle=True)
#x_train.dropna(axis=0, inplace=True)
#y_train.dropna(axis=0, inplace=True)
del x, y3

print("9")
model = km.Sequential()
model.add(kla.Dense(128, input_dim=2, activation='relu'))
model.add(kla.Dropout(0.5))
model.add(kla.Dense(64, activation='relu'))
model.add(kla.Dense(32, activation='relu'))
#model.add(kla.Dense(16, activation='relu'))
model.add(kla.Dense(1, activation='sigmoid'))

#bce = klo.BinaryCrossentropy(from_logits = True, label_smoothing = 0, axis= -1, reduction = "auto")
#model.compile(loss= 'poisson', optimizer= 'adam', metrics=['accuracy'])
model.compile(optimizer="adam",loss=klo.BinaryCrossentropy(),
              metrics=kkme.BinaryAccuracy())
              #,tf.keras.metrics.FalseNegatives()])
# fit the keras model on the dataset
model.fit(x_train, y_train, batch_size= 32, epochs= 250)

# evaluate the keras model
_, accuracy_mdl = model.evaluate(x_train, y_train)

#stackoverflowda buldum dÃ¼zenle bunu
# extract the predicted probabilities
p_pred = model.predict(x_test)
p_pred = p_pred.flatten()
print(p_pred.round(2))

# extract the predicted class labels
y_hat_test = np.where(p_pred > 0.5, 1, 0)
print(y_hat_test)

print(confusion_matrix(y_test, y_hat_test))
print(classification_report(y_test, y_hat_test))


model.save("C:/Users/desdina.kof/Desktop/calismalarim/prach/")
